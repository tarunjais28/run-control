/* automatically generated by rust-bindgen */

pub const DPI_MAJOR_VERSION: u32 = 3;
pub const DPI_MINOR_VERSION: u32 = 1;
pub const DPI_PATCH_LEVEL: u32 = 3;
pub const DPI_DEFAULT_FETCH_ARRAY_SIZE: u32 = 100;
pub const DPI_DEFAULT_PING_INTERVAL: u32 = 60;
pub const DPI_DEFAULT_PING_TIMEOUT: u32 = 5000;
pub const DPI_DEQ_WAIT_NO_WAIT: u32 = 0;
pub const DPI_MAX_INT64_PRECISION: u32 = 18;
pub const DPI_SUCCESS: u32 = 0;
pub const DPI_FAILURE: i32 = -1;
pub const DPI_DEBUG_LEVEL_FREES: u32 = 1;
pub const DPI_DEBUG_LEVEL_REFS: u32 = 2;
pub const DPI_DEBUG_LEVEL_FNS: u32 = 4;
pub const DPI_DEBUG_LEVEL_ERRORS: u32 = 8;
pub const DPI_DEBUG_LEVEL_SQL: u32 = 16;
pub const DPI_DEBUG_LEVEL_MEM: u32 = 32;
pub const DPI_MODE_AUTH_DEFAULT: u32 = 0;
pub const DPI_MODE_AUTH_SYSDBA: u32 = 2;
pub const DPI_MODE_AUTH_SYSOPER: u32 = 4;
pub const DPI_MODE_AUTH_PRELIM: u32 = 8;
pub const DPI_MODE_AUTH_SYSASM: u32 = 32768;
pub const DPI_MODE_AUTH_SYSBKP: u32 = 131072;
pub const DPI_MODE_AUTH_SYSDGD: u32 = 262144;
pub const DPI_MODE_AUTH_SYSKMT: u32 = 524288;
pub const DPI_MODE_AUTH_SYSRAC: u32 = 1048576;
pub const DPI_MODE_CONN_CLOSE_DEFAULT: u32 = 0;
pub const DPI_MODE_CONN_CLOSE_DROP: u32 = 1;
pub const DPI_MODE_CONN_CLOSE_RETAG: u32 = 2;
pub const DPI_MODE_CREATE_DEFAULT: u32 = 0;
pub const DPI_MODE_CREATE_THREADED: u32 = 1;
pub const DPI_MODE_CREATE_EVENTS: u32 = 4;
pub const DPI_MODE_DEQ_BROWSE: u32 = 1;
pub const DPI_MODE_DEQ_LOCKED: u32 = 2;
pub const DPI_MODE_DEQ_REMOVE: u32 = 3;
pub const DPI_MODE_DEQ_REMOVE_NO_DATA: u32 = 4;
pub const DPI_DEQ_NAV_FIRST_MSG: u32 = 1;
pub const DPI_DEQ_NAV_NEXT_TRANSACTION: u32 = 2;
pub const DPI_DEQ_NAV_NEXT_MSG: u32 = 3;
pub const DPI_EVENT_NONE: u32 = 0;
pub const DPI_EVENT_STARTUP: u32 = 1;
pub const DPI_EVENT_SHUTDOWN: u32 = 2;
pub const DPI_EVENT_SHUTDOWN_ANY: u32 = 3;
pub const DPI_EVENT_DROP_DB: u32 = 4;
pub const DPI_EVENT_DEREG: u32 = 5;
pub const DPI_EVENT_OBJCHANGE: u32 = 6;
pub const DPI_EVENT_QUERYCHANGE: u32 = 7;
pub const DPI_EVENT_AQ: u32 = 100;
pub const DPI_MODE_EXEC_DEFAULT: u32 = 0;
pub const DPI_MODE_EXEC_DESCRIBE_ONLY: u32 = 16;
pub const DPI_MODE_EXEC_COMMIT_ON_SUCCESS: u32 = 32;
pub const DPI_MODE_EXEC_BATCH_ERRORS: u32 = 128;
pub const DPI_MODE_EXEC_PARSE_ONLY: u32 = 256;
pub const DPI_MODE_EXEC_ARRAY_DML_ROWCOUNTS: u32 = 1048576;
pub const DPI_MODE_FETCH_NEXT: u32 = 2;
pub const DPI_MODE_FETCH_FIRST: u32 = 4;
pub const DPI_MODE_FETCH_LAST: u32 = 8;
pub const DPI_MODE_FETCH_PRIOR: u32 = 16;
pub const DPI_MODE_FETCH_ABSOLUTE: u32 = 32;
pub const DPI_MODE_FETCH_RELATIVE: u32 = 64;
pub const DPI_MODE_MSG_PERSISTENT: u32 = 1;
pub const DPI_MODE_MSG_BUFFERED: u32 = 2;
pub const DPI_MODE_MSG_PERSISTENT_OR_BUFFERED: u32 = 3;
pub const DPI_MSG_STATE_READY: u32 = 0;
pub const DPI_MSG_STATE_WAITING: u32 = 1;
pub const DPI_MSG_STATE_PROCESSED: u32 = 2;
pub const DPI_MSG_STATE_EXPIRED: u32 = 3;
pub const DPI_NATIVE_TYPE_INT64: u32 = 3000;
pub const DPI_NATIVE_TYPE_UINT64: u32 = 3001;
pub const DPI_NATIVE_TYPE_FLOAT: u32 = 3002;
pub const DPI_NATIVE_TYPE_DOUBLE: u32 = 3003;
pub const DPI_NATIVE_TYPE_BYTES: u32 = 3004;
pub const DPI_NATIVE_TYPE_TIMESTAMP: u32 = 3005;
pub const DPI_NATIVE_TYPE_INTERVAL_DS: u32 = 3006;
pub const DPI_NATIVE_TYPE_INTERVAL_YM: u32 = 3007;
pub const DPI_NATIVE_TYPE_LOB: u32 = 3008;
pub const DPI_NATIVE_TYPE_OBJECT: u32 = 3009;
pub const DPI_NATIVE_TYPE_STMT: u32 = 3010;
pub const DPI_NATIVE_TYPE_BOOLEAN: u32 = 3011;
pub const DPI_NATIVE_TYPE_ROWID: u32 = 3012;
pub const DPI_OPCODE_ALL_OPS: u32 = 0;
pub const DPI_OPCODE_ALL_ROWS: u32 = 1;
pub const DPI_OPCODE_INSERT: u32 = 2;
pub const DPI_OPCODE_UPDATE: u32 = 4;
pub const DPI_OPCODE_DELETE: u32 = 8;
pub const DPI_OPCODE_ALTER: u32 = 16;
pub const DPI_OPCODE_DROP: u32 = 32;
pub const DPI_OPCODE_UNKNOWN: u32 = 64;
pub const DPI_ORACLE_TYPE_NONE: u32 = 2000;
pub const DPI_ORACLE_TYPE_VARCHAR: u32 = 2001;
pub const DPI_ORACLE_TYPE_NVARCHAR: u32 = 2002;
pub const DPI_ORACLE_TYPE_CHAR: u32 = 2003;
pub const DPI_ORACLE_TYPE_NCHAR: u32 = 2004;
pub const DPI_ORACLE_TYPE_ROWID: u32 = 2005;
pub const DPI_ORACLE_TYPE_RAW: u32 = 2006;
pub const DPI_ORACLE_TYPE_NATIVE_FLOAT: u32 = 2007;
pub const DPI_ORACLE_TYPE_NATIVE_DOUBLE: u32 = 2008;
pub const DPI_ORACLE_TYPE_NATIVE_INT: u32 = 2009;
pub const DPI_ORACLE_TYPE_NUMBER: u32 = 2010;
pub const DPI_ORACLE_TYPE_DATE: u32 = 2011;
pub const DPI_ORACLE_TYPE_TIMESTAMP: u32 = 2012;
pub const DPI_ORACLE_TYPE_TIMESTAMP_TZ: u32 = 2013;
pub const DPI_ORACLE_TYPE_TIMESTAMP_LTZ: u32 = 2014;
pub const DPI_ORACLE_TYPE_INTERVAL_DS: u32 = 2015;
pub const DPI_ORACLE_TYPE_INTERVAL_YM: u32 = 2016;
pub const DPI_ORACLE_TYPE_CLOB: u32 = 2017;
pub const DPI_ORACLE_TYPE_NCLOB: u32 = 2018;
pub const DPI_ORACLE_TYPE_BLOB: u32 = 2019;
pub const DPI_ORACLE_TYPE_BFILE: u32 = 2020;
pub const DPI_ORACLE_TYPE_STMT: u32 = 2021;
pub const DPI_ORACLE_TYPE_BOOLEAN: u32 = 2022;
pub const DPI_ORACLE_TYPE_OBJECT: u32 = 2023;
pub const DPI_ORACLE_TYPE_LONG_VARCHAR: u32 = 2024;
pub const DPI_ORACLE_TYPE_LONG_RAW: u32 = 2025;
pub const DPI_ORACLE_TYPE_NATIVE_UINT: u32 = 2026;
pub const DPI_ORACLE_TYPE_MAX: u32 = 2027;
pub const DPI_MODE_POOL_CLOSE_DEFAULT: u32 = 0;
pub const DPI_MODE_POOL_CLOSE_FORCE: u32 = 1;
pub const DPI_MODE_POOL_GET_WAIT: u32 = 0;
pub const DPI_MODE_POOL_GET_NOWAIT: u32 = 1;
pub const DPI_MODE_POOL_GET_FORCEGET: u32 = 2;
pub const DPI_MODE_POOL_GET_TIMEDWAIT: u32 = 3;
pub const DPI_PURITY_DEFAULT: u32 = 0;
pub const DPI_PURITY_NEW: u32 = 1;
pub const DPI_PURITY_SELF: u32 = 2;
pub const DPI_MODE_SHUTDOWN_DEFAULT: u32 = 0;
pub const DPI_MODE_SHUTDOWN_TRANSACTIONAL: u32 = 1;
pub const DPI_MODE_SHUTDOWN_TRANSACTIONAL_LOCAL: u32 = 2;
pub const DPI_MODE_SHUTDOWN_IMMEDIATE: u32 = 3;
pub const DPI_MODE_SHUTDOWN_ABORT: u32 = 4;
pub const DPI_MODE_SHUTDOWN_FINAL: u32 = 5;
pub const DPI_SODA_FLAGS_DEFAULT: u32 = 0;
pub const DPI_SODA_FLAGS_ATOMIC_COMMIT: u32 = 1;
pub const DPI_SODA_FLAGS_CREATE_COLL_MAP: u32 = 2;
pub const DPI_SODA_FLAGS_INDEX_DROP_FORCE: u32 = 4;
pub const DPI_MODE_STARTUP_DEFAULT: u32 = 0;
pub const DPI_MODE_STARTUP_FORCE: u32 = 1;
pub const DPI_MODE_STARTUP_RESTRICT: u32 = 2;
pub const DPI_STMT_TYPE_UNKNOWN: u32 = 0;
pub const DPI_STMT_TYPE_SELECT: u32 = 1;
pub const DPI_STMT_TYPE_UPDATE: u32 = 2;
pub const DPI_STMT_TYPE_DELETE: u32 = 3;
pub const DPI_STMT_TYPE_INSERT: u32 = 4;
pub const DPI_STMT_TYPE_CREATE: u32 = 5;
pub const DPI_STMT_TYPE_DROP: u32 = 6;
pub const DPI_STMT_TYPE_ALTER: u32 = 7;
pub const DPI_STMT_TYPE_BEGIN: u32 = 8;
pub const DPI_STMT_TYPE_DECLARE: u32 = 9;
pub const DPI_STMT_TYPE_CALL: u32 = 10;
pub const DPI_STMT_TYPE_EXPLAIN_PLAN: u32 = 15;
pub const DPI_STMT_TYPE_MERGE: u32 = 16;
pub const DPI_STMT_TYPE_ROLLBACK: u32 = 17;
pub const DPI_STMT_TYPE_COMMIT: u32 = 21;
pub const DPI_SUBSCR_GROUPING_CLASS_TIME: u32 = 1;
pub const DPI_SUBSCR_GROUPING_TYPE_SUMMARY: u32 = 1;
pub const DPI_SUBSCR_GROUPING_TYPE_LAST: u32 = 2;
pub const DPI_SUBSCR_NAMESPACE_AQ: u32 = 1;
pub const DPI_SUBSCR_NAMESPACE_DBCHANGE: u32 = 2;
pub const DPI_SUBSCR_PROTO_CALLBACK: u32 = 0;
pub const DPI_SUBSCR_PROTO_MAIL: u32 = 1;
pub const DPI_SUBSCR_PROTO_PLSQL: u32 = 2;
pub const DPI_SUBSCR_PROTO_HTTP: u32 = 3;
pub const DPI_SUBSCR_QOS_RELIABLE: u32 = 1;
pub const DPI_SUBSCR_QOS_DEREG_NFY: u32 = 2;
pub const DPI_SUBSCR_QOS_ROWIDS: u32 = 4;
pub const DPI_SUBSCR_QOS_QUERY: u32 = 8;
pub const DPI_SUBSCR_QOS_BEST_EFFORT: u32 = 16;
pub const DPI_VISIBILITY_IMMEDIATE: u32 = 1;
pub const DPI_VISIBILITY_ON_COMMIT: u32 = 2;
pub type dpiAuthMode = u32;
pub type dpiConnCloseMode = u32;
pub type dpiCreateMode = u32;
pub type dpiDeqMode = u32;
pub type dpiDeqNavigation = u32;
pub type dpiEventType = u32;
pub type dpiExecMode = u32;
pub type dpiFetchMode = u16;
pub type dpiMessageDeliveryMode = u16;
pub type dpiMessageState = u32;
pub type dpiNativeTypeNum = u32;
pub type dpiOpCode = u32;
pub type dpiOracleTypeNum = u32;
pub type dpiPoolCloseMode = u32;
pub type dpiPoolGetMode = u8;
pub type dpiPurity = u32;
pub type dpiShutdownMode = u32;
pub type dpiStartupMode = u32;
pub type dpiStatementType = u16;
pub type dpiSubscrGroupingClass = u8;
pub type dpiSubscrGroupingType = u8;
pub type dpiSubscrNamespace = u32;
pub type dpiSubscrProtocol = u32;
pub type dpiSubscrQOS = u32;
pub type dpiVisibility = u32;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiConn {
    _unused: [u8; 0],
}
impl Clone for dpiConn {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiPool {
    _unused: [u8; 0],
}
impl Clone for dpiPool {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiStmt {
    _unused: [u8; 0],
}
impl Clone for dpiStmt {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiVar {
    _unused: [u8; 0],
}
impl Clone for dpiVar {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiLob {
    _unused: [u8; 0],
}
impl Clone for dpiLob {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiObject {
    _unused: [u8; 0],
}
impl Clone for dpiObject {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiObjectAttr {
    _unused: [u8; 0],
}
impl Clone for dpiObjectAttr {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiObjectType {
    _unused: [u8; 0],
}
impl Clone for dpiObjectType {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiRowid {
    _unused: [u8; 0],
}
impl Clone for dpiRowid {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiSubscr {
    _unused: [u8; 0],
}
impl Clone for dpiSubscr {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiDeqOptions {
    _unused: [u8; 0],
}
impl Clone for dpiDeqOptions {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiEnqOptions {
    _unused: [u8; 0],
}
impl Clone for dpiEnqOptions {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiMsgProps {
    _unused: [u8; 0],
}
impl Clone for dpiMsgProps {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiBytes {
    pub ptr: *mut ::std::os::raw::c_char,
    pub length: u32,
    pub encoding: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_dpiBytes() {
    assert_eq!(
        ::std::mem::size_of::<dpiBytes>(),
        24usize,
        concat!("Size of: ", stringify!(dpiBytes))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiBytes>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiBytes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiBytes>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiBytes),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiBytes>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiBytes),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiBytes>())).encoding as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiBytes),
            "::",
            stringify!(encoding)
        )
    );
}
impl Clone for dpiBytes {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiIntervalDS {
    pub days: i32,
    pub hours: i32,
    pub minutes: i32,
    pub seconds: i32,
    pub fseconds: i32,
}
#[test]
fn bindgen_test_layout_dpiIntervalDS() {
    assert_eq!(
        ::std::mem::size_of::<dpiIntervalDS>(),
        20usize,
        concat!("Size of: ", stringify!(dpiIntervalDS))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiIntervalDS>(),
        4usize,
        concat!("Alignment of ", stringify!(dpiIntervalDS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiIntervalDS>())).days as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiIntervalDS),
            "::",
            stringify!(days)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiIntervalDS>())).hours as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiIntervalDS),
            "::",
            stringify!(hours)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiIntervalDS>())).minutes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiIntervalDS),
            "::",
            stringify!(minutes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiIntervalDS>())).seconds as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiIntervalDS),
            "::",
            stringify!(seconds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiIntervalDS>())).fseconds as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiIntervalDS),
            "::",
            stringify!(fseconds)
        )
    );
}
impl Clone for dpiIntervalDS {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiIntervalYM {
    pub years: i32,
    pub months: i32,
}
#[test]
fn bindgen_test_layout_dpiIntervalYM() {
    assert_eq!(
        ::std::mem::size_of::<dpiIntervalYM>(),
        8usize,
        concat!("Size of: ", stringify!(dpiIntervalYM))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiIntervalYM>(),
        4usize,
        concat!("Alignment of ", stringify!(dpiIntervalYM))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiIntervalYM>())).years as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiIntervalYM),
            "::",
            stringify!(years)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiIntervalYM>())).months as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiIntervalYM),
            "::",
            stringify!(months)
        )
    );
}
impl Clone for dpiIntervalYM {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiTimestamp {
    pub year: i16,
    pub month: u8,
    pub day: u8,
    pub hour: u8,
    pub minute: u8,
    pub second: u8,
    pub fsecond: u32,
    pub tzHourOffset: i8,
    pub tzMinuteOffset: i8,
}
#[test]
fn bindgen_test_layout_dpiTimestamp() {
    assert_eq!(
        ::std::mem::size_of::<dpiTimestamp>(),
        16usize,
        concat!("Size of: ", stringify!(dpiTimestamp))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiTimestamp>(),
        4usize,
        concat!("Alignment of ", stringify!(dpiTimestamp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiTimestamp>())).year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiTimestamp),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiTimestamp>())).month as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiTimestamp),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiTimestamp>())).day as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiTimestamp),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiTimestamp>())).hour as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiTimestamp),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiTimestamp>())).minute as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiTimestamp),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiTimestamp>())).second as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiTimestamp),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiTimestamp>())).fsecond as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiTimestamp),
            "::",
            stringify!(fsecond)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiTimestamp>())).tzHourOffset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiTimestamp),
            "::",
            stringify!(tzHourOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiTimestamp>())).tzMinuteOffset as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiTimestamp),
            "::",
            stringify!(tzMinuteOffset)
        )
    );
}
impl Clone for dpiTimestamp {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiContext {
    _unused: [u8; 0],
}
impl Clone for dpiContext {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiSodaColl {
    _unused: [u8; 0],
}
impl Clone for dpiSodaColl {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiSodaCollCursor {
    _unused: [u8; 0],
}
impl Clone for dpiSodaCollCursor {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiSodaDb {
    _unused: [u8; 0],
}
impl Clone for dpiSodaDb {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiSodaDoc {
    _unused: [u8; 0],
}
impl Clone for dpiSodaDoc {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiSodaDocCursor {
    _unused: [u8; 0],
}
impl Clone for dpiSodaDocCursor {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Copy)]
pub union dpiDataBuffer {
    pub asBoolean: ::std::os::raw::c_int,
    pub asInt64: i64,
    pub asUint64: u64,
    pub asFloat: f32,
    pub asDouble: f64,
    pub asBytes: dpiBytes,
    pub asTimestamp: dpiTimestamp,
    pub asIntervalDS: dpiIntervalDS,
    pub asIntervalYM: dpiIntervalYM,
    pub asLOB: *mut dpiLob,
    pub asObject: *mut dpiObject,
    pub asStmt: *mut dpiStmt,
    pub asRowid: *mut dpiRowid,
    _bindgen_union_align: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_dpiDataBuffer() {
    assert_eq!(
        ::std::mem::size_of::<dpiDataBuffer>(),
        24usize,
        concat!("Size of: ", stringify!(dpiDataBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiDataBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiDataBuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataBuffer>())).asBoolean as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataBuffer),
            "::",
            stringify!(asBoolean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataBuffer>())).asInt64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataBuffer),
            "::",
            stringify!(asInt64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataBuffer>())).asUint64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataBuffer),
            "::",
            stringify!(asUint64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataBuffer>())).asFloat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataBuffer),
            "::",
            stringify!(asFloat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataBuffer>())).asDouble as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataBuffer),
            "::",
            stringify!(asDouble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataBuffer>())).asBytes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataBuffer),
            "::",
            stringify!(asBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataBuffer>())).asTimestamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataBuffer),
            "::",
            stringify!(asTimestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataBuffer>())).asIntervalDS as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataBuffer),
            "::",
            stringify!(asIntervalDS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataBuffer>())).asIntervalYM as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataBuffer),
            "::",
            stringify!(asIntervalYM)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataBuffer>())).asLOB as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataBuffer),
            "::",
            stringify!(asLOB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataBuffer>())).asObject as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataBuffer),
            "::",
            stringify!(asObject)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataBuffer>())).asStmt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataBuffer),
            "::",
            stringify!(asStmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataBuffer>())).asRowid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataBuffer),
            "::",
            stringify!(asRowid)
        )
    );
}
impl Clone for dpiDataBuffer {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiAppContext {
    pub namespaceName: *const ::std::os::raw::c_char,
    pub namespaceNameLength: u32,
    pub name: *const ::std::os::raw::c_char,
    pub nameLength: u32,
    pub value: *const ::std::os::raw::c_char,
    pub valueLength: u32,
}
#[test]
fn bindgen_test_layout_dpiAppContext() {
    assert_eq!(
        ::std::mem::size_of::<dpiAppContext>(),
        48usize,
        concat!("Size of: ", stringify!(dpiAppContext))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiAppContext>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiAppContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiAppContext>())).namespaceName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiAppContext),
            "::",
            stringify!(namespaceName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiAppContext>())).namespaceNameLength as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiAppContext),
            "::",
            stringify!(namespaceNameLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiAppContext>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiAppContext),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiAppContext>())).nameLength as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiAppContext),
            "::",
            stringify!(nameLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiAppContext>())).value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiAppContext),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiAppContext>())).valueLength as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiAppContext),
            "::",
            stringify!(valueLength)
        )
    );
}
impl Clone for dpiAppContext {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiCommonCreateParams {
    pub createMode: dpiCreateMode,
    pub encoding: *const ::std::os::raw::c_char,
    pub nencoding: *const ::std::os::raw::c_char,
    pub edition: *const ::std::os::raw::c_char,
    pub editionLength: u32,
    pub driverName: *const ::std::os::raw::c_char,
    pub driverNameLength: u32,
}
#[test]
fn bindgen_test_layout_dpiCommonCreateParams() {
    assert_eq!(
        ::std::mem::size_of::<dpiCommonCreateParams>(),
        56usize,
        concat!("Size of: ", stringify!(dpiCommonCreateParams))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiCommonCreateParams>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiCommonCreateParams))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiCommonCreateParams>())).createMode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiCommonCreateParams),
            "::",
            stringify!(createMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiCommonCreateParams>())).encoding as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiCommonCreateParams),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiCommonCreateParams>())).nencoding as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiCommonCreateParams),
            "::",
            stringify!(nencoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiCommonCreateParams>())).edition as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiCommonCreateParams),
            "::",
            stringify!(edition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiCommonCreateParams>())).editionLength as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiCommonCreateParams),
            "::",
            stringify!(editionLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiCommonCreateParams>())).driverName as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiCommonCreateParams),
            "::",
            stringify!(driverName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiCommonCreateParams>())).driverNameLength as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiCommonCreateParams),
            "::",
            stringify!(driverNameLength)
        )
    );
}
impl Clone for dpiCommonCreateParams {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiConnCreateParams {
    pub authMode: dpiAuthMode,
    pub connectionClass: *const ::std::os::raw::c_char,
    pub connectionClassLength: u32,
    pub purity: dpiPurity,
    pub newPassword: *const ::std::os::raw::c_char,
    pub newPasswordLength: u32,
    pub appContext: *mut dpiAppContext,
    pub numAppContext: u32,
    pub externalAuth: ::std::os::raw::c_int,
    pub externalHandle: *mut ::std::os::raw::c_void,
    pub pool: *mut dpiPool,
    pub tag: *const ::std::os::raw::c_char,
    pub tagLength: u32,
    pub matchAnyTag: ::std::os::raw::c_int,
    pub outTag: *const ::std::os::raw::c_char,
    pub outTagLength: u32,
    pub outTagFound: ::std::os::raw::c_int,
    pub shardingKeyColumns: *mut dpiShardingKeyColumn,
    pub numShardingKeyColumns: u8,
    pub superShardingKeyColumns: *mut dpiShardingKeyColumn,
    pub numSuperShardingKeyColumns: u8,
    pub outNewSession: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_dpiConnCreateParams() {
    assert_eq!(
        ::std::mem::size_of::<dpiConnCreateParams>(),
        136usize,
        concat!("Size of: ", stringify!(dpiConnCreateParams))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiConnCreateParams>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiConnCreateParams))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiConnCreateParams>())).authMode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(authMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiConnCreateParams>())).connectionClass as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(connectionClass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiConnCreateParams>())).connectionClassLength as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(connectionClassLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiConnCreateParams>())).purity as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(purity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiConnCreateParams>())).newPassword as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(newPassword)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiConnCreateParams>())).newPasswordLength as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(newPasswordLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiConnCreateParams>())).appContext as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(appContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiConnCreateParams>())).numAppContext as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(numAppContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiConnCreateParams>())).externalAuth as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(externalAuth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiConnCreateParams>())).externalHandle as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(externalHandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiConnCreateParams>())).pool as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiConnCreateParams>())).tag as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiConnCreateParams>())).tagLength as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(tagLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiConnCreateParams>())).matchAnyTag as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(matchAnyTag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiConnCreateParams>())).outTag as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(outTag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiConnCreateParams>())).outTagLength as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(outTagLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiConnCreateParams>())).outTagFound as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(outTagFound)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiConnCreateParams>())).shardingKeyColumns as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(shardingKeyColumns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiConnCreateParams>())).numShardingKeyColumns as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(numShardingKeyColumns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiConnCreateParams>())).superShardingKeyColumns as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(superShardingKeyColumns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiConnCreateParams>())).numSuperShardingKeyColumns as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(numSuperShardingKeyColumns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiConnCreateParams>())).outNewSession as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiConnCreateParams),
            "::",
            stringify!(outNewSession)
        )
    );
}
impl Clone for dpiConnCreateParams {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct dpiData {
    pub isNull: ::std::os::raw::c_int,
    pub value: dpiDataBuffer,
}
#[test]
fn bindgen_test_layout_dpiData() {
    assert_eq!(
        ::std::mem::size_of::<dpiData>(),
        32usize,
        concat!("Size of: ", stringify!(dpiData))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiData>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiData>())).isNull as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiData),
            "::",
            stringify!(isNull)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiData>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiData),
            "::",
            stringify!(value)
        )
    );
}
impl Clone for dpiData {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiDataTypeInfo {
    pub oracleTypeNum: dpiOracleTypeNum,
    pub defaultNativeTypeNum: dpiNativeTypeNum,
    pub ociTypeCode: u16,
    pub dbSizeInBytes: u32,
    pub clientSizeInBytes: u32,
    pub sizeInChars: u32,
    pub precision: i16,
    pub scale: i8,
    pub fsPrecision: u8,
    pub objectType: *mut dpiObjectType,
}
#[test]
fn bindgen_test_layout_dpiDataTypeInfo() {
    assert_eq!(
        ::std::mem::size_of::<dpiDataTypeInfo>(),
        40usize,
        concat!("Size of: ", stringify!(dpiDataTypeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiDataTypeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiDataTypeInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataTypeInfo>())).oracleTypeNum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataTypeInfo),
            "::",
            stringify!(oracleTypeNum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiDataTypeInfo>())).defaultNativeTypeNum as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataTypeInfo),
            "::",
            stringify!(defaultNativeTypeNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataTypeInfo>())).ociTypeCode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataTypeInfo),
            "::",
            stringify!(ociTypeCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataTypeInfo>())).dbSizeInBytes as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataTypeInfo),
            "::",
            stringify!(dbSizeInBytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiDataTypeInfo>())).clientSizeInBytes as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataTypeInfo),
            "::",
            stringify!(clientSizeInBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataTypeInfo>())).sizeInChars as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataTypeInfo),
            "::",
            stringify!(sizeInChars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataTypeInfo>())).precision as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataTypeInfo),
            "::",
            stringify!(precision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataTypeInfo>())).scale as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataTypeInfo),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataTypeInfo>())).fsPrecision as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataTypeInfo),
            "::",
            stringify!(fsPrecision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiDataTypeInfo>())).objectType as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiDataTypeInfo),
            "::",
            stringify!(objectType)
        )
    );
}
impl Clone for dpiDataTypeInfo {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiEncodingInfo {
    pub encoding: *const ::std::os::raw::c_char,
    pub maxBytesPerCharacter: i32,
    pub nencoding: *const ::std::os::raw::c_char,
    pub nmaxBytesPerCharacter: i32,
}
#[test]
fn bindgen_test_layout_dpiEncodingInfo() {
    assert_eq!(
        ::std::mem::size_of::<dpiEncodingInfo>(),
        32usize,
        concat!("Size of: ", stringify!(dpiEncodingInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiEncodingInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiEncodingInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiEncodingInfo>())).encoding as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiEncodingInfo),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiEncodingInfo>())).maxBytesPerCharacter as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiEncodingInfo),
            "::",
            stringify!(maxBytesPerCharacter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiEncodingInfo>())).nencoding as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiEncodingInfo),
            "::",
            stringify!(nencoding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiEncodingInfo>())).nmaxBytesPerCharacter as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiEncodingInfo),
            "::",
            stringify!(nmaxBytesPerCharacter)
        )
    );
}
impl Clone for dpiEncodingInfo {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiErrorInfo {
    pub code: i32,
    pub offset: u16,
    pub message: *const ::std::os::raw::c_char,
    pub messageLength: u32,
    pub encoding: *const ::std::os::raw::c_char,
    pub fnName: *const ::std::os::raw::c_char,
    pub action: *const ::std::os::raw::c_char,
    pub sqlState: *const ::std::os::raw::c_char,
    pub isRecoverable: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_dpiErrorInfo() {
    assert_eq!(
        ::std::mem::size_of::<dpiErrorInfo>(),
        64usize,
        concat!("Size of: ", stringify!(dpiErrorInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiErrorInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiErrorInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiErrorInfo>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiErrorInfo),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiErrorInfo>())).offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiErrorInfo),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiErrorInfo>())).message as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiErrorInfo),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiErrorInfo>())).messageLength as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiErrorInfo),
            "::",
            stringify!(messageLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiErrorInfo>())).encoding as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiErrorInfo),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiErrorInfo>())).fnName as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiErrorInfo),
            "::",
            stringify!(fnName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiErrorInfo>())).action as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiErrorInfo),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiErrorInfo>())).sqlState as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiErrorInfo),
            "::",
            stringify!(sqlState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiErrorInfo>())).isRecoverable as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiErrorInfo),
            "::",
            stringify!(isRecoverable)
        )
    );
}
impl Clone for dpiErrorInfo {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiObjectAttrInfo {
    pub name: *const ::std::os::raw::c_char,
    pub nameLength: u32,
    pub typeInfo: dpiDataTypeInfo,
}
#[test]
fn bindgen_test_layout_dpiObjectAttrInfo() {
    assert_eq!(
        ::std::mem::size_of::<dpiObjectAttrInfo>(),
        56usize,
        concat!("Size of: ", stringify!(dpiObjectAttrInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiObjectAttrInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiObjectAttrInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiObjectAttrInfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiObjectAttrInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiObjectAttrInfo>())).nameLength as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiObjectAttrInfo),
            "::",
            stringify!(nameLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiObjectAttrInfo>())).typeInfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiObjectAttrInfo),
            "::",
            stringify!(typeInfo)
        )
    );
}
impl Clone for dpiObjectAttrInfo {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiObjectTypeInfo {
    pub schema: *const ::std::os::raw::c_char,
    pub schemaLength: u32,
    pub name: *const ::std::os::raw::c_char,
    pub nameLength: u32,
    pub isCollection: ::std::os::raw::c_int,
    pub elementTypeInfo: dpiDataTypeInfo,
    pub numAttributes: u16,
}
#[test]
fn bindgen_test_layout_dpiObjectTypeInfo() {
    assert_eq!(
        ::std::mem::size_of::<dpiObjectTypeInfo>(),
        80usize,
        concat!("Size of: ", stringify!(dpiObjectTypeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiObjectTypeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiObjectTypeInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiObjectTypeInfo>())).schema as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiObjectTypeInfo),
            "::",
            stringify!(schema)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiObjectTypeInfo>())).schemaLength as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiObjectTypeInfo),
            "::",
            stringify!(schemaLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiObjectTypeInfo>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiObjectTypeInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiObjectTypeInfo>())).nameLength as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiObjectTypeInfo),
            "::",
            stringify!(nameLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiObjectTypeInfo>())).isCollection as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiObjectTypeInfo),
            "::",
            stringify!(isCollection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiObjectTypeInfo>())).elementTypeInfo as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiObjectTypeInfo),
            "::",
            stringify!(elementTypeInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiObjectTypeInfo>())).numAttributes as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiObjectTypeInfo),
            "::",
            stringify!(numAttributes)
        )
    );
}
impl Clone for dpiObjectTypeInfo {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiPoolCreateParams {
    pub minSessions: u32,
    pub maxSessions: u32,
    pub sessionIncrement: u32,
    pub pingInterval: ::std::os::raw::c_int,
    pub pingTimeout: ::std::os::raw::c_int,
    pub homogeneous: ::std::os::raw::c_int,
    pub externalAuth: ::std::os::raw::c_int,
    pub getMode: dpiPoolGetMode,
    pub outPoolName: *const ::std::os::raw::c_char,
    pub outPoolNameLength: u32,
    pub timeout: u32,
    pub waitTimeout: u32,
    pub maxLifetimeSession: u32,
    pub plsqlFixupCallback: *const ::std::os::raw::c_char,
    pub plsqlFixupCallbackLength: u32,
}
#[test]
fn bindgen_test_layout_dpiPoolCreateParams() {
    assert_eq!(
        ::std::mem::size_of::<dpiPoolCreateParams>(),
        72usize,
        concat!("Size of: ", stringify!(dpiPoolCreateParams))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiPoolCreateParams>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiPoolCreateParams))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiPoolCreateParams>())).minSessions as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiPoolCreateParams),
            "::",
            stringify!(minSessions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiPoolCreateParams>())).maxSessions as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiPoolCreateParams),
            "::",
            stringify!(maxSessions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiPoolCreateParams>())).sessionIncrement as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiPoolCreateParams),
            "::",
            stringify!(sessionIncrement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiPoolCreateParams>())).pingInterval as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiPoolCreateParams),
            "::",
            stringify!(pingInterval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiPoolCreateParams>())).pingTimeout as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiPoolCreateParams),
            "::",
            stringify!(pingTimeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiPoolCreateParams>())).homogeneous as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiPoolCreateParams),
            "::",
            stringify!(homogeneous)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiPoolCreateParams>())).externalAuth as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiPoolCreateParams),
            "::",
            stringify!(externalAuth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiPoolCreateParams>())).getMode as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiPoolCreateParams),
            "::",
            stringify!(getMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiPoolCreateParams>())).outPoolName as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiPoolCreateParams),
            "::",
            stringify!(outPoolName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiPoolCreateParams>())).outPoolNameLength as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiPoolCreateParams),
            "::",
            stringify!(outPoolNameLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiPoolCreateParams>())).timeout as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiPoolCreateParams),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiPoolCreateParams>())).waitTimeout as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiPoolCreateParams),
            "::",
            stringify!(waitTimeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiPoolCreateParams>())).maxLifetimeSession as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiPoolCreateParams),
            "::",
            stringify!(maxLifetimeSession)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiPoolCreateParams>())).plsqlFixupCallback as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiPoolCreateParams),
            "::",
            stringify!(plsqlFixupCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiPoolCreateParams>())).plsqlFixupCallbackLength as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiPoolCreateParams),
            "::",
            stringify!(plsqlFixupCallbackLength)
        )
    );
}
impl Clone for dpiPoolCreateParams {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiQueryInfo {
    pub name: *const ::std::os::raw::c_char,
    pub nameLength: u32,
    pub typeInfo: dpiDataTypeInfo,
    pub nullOk: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_dpiQueryInfo() {
    assert_eq!(
        ::std::mem::size_of::<dpiQueryInfo>(),
        64usize,
        concat!("Size of: ", stringify!(dpiQueryInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiQueryInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiQueryInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiQueryInfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiQueryInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiQueryInfo>())).nameLength as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiQueryInfo),
            "::",
            stringify!(nameLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiQueryInfo>())).typeInfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiQueryInfo),
            "::",
            stringify!(typeInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiQueryInfo>())).nullOk as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiQueryInfo),
            "::",
            stringify!(nullOk)
        )
    );
}
impl Clone for dpiQueryInfo {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct dpiShardingKeyColumn {
    pub oracleTypeNum: dpiOracleTypeNum,
    pub nativeTypeNum: dpiNativeTypeNum,
    pub value: dpiDataBuffer,
}
#[test]
fn bindgen_test_layout_dpiShardingKeyColumn() {
    assert_eq!(
        ::std::mem::size_of::<dpiShardingKeyColumn>(),
        32usize,
        concat!("Size of: ", stringify!(dpiShardingKeyColumn))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiShardingKeyColumn>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiShardingKeyColumn))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiShardingKeyColumn>())).oracleTypeNum as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiShardingKeyColumn),
            "::",
            stringify!(oracleTypeNum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiShardingKeyColumn>())).nativeTypeNum as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiShardingKeyColumn),
            "::",
            stringify!(nativeTypeNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiShardingKeyColumn>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiShardingKeyColumn),
            "::",
            stringify!(value)
        )
    );
}
impl Clone for dpiShardingKeyColumn {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiSodaCollNames {
    pub numNames: u32,
    pub names: *mut *const ::std::os::raw::c_char,
    pub nameLengths: *mut u32,
}
#[test]
fn bindgen_test_layout_dpiSodaCollNames() {
    assert_eq!(
        ::std::mem::size_of::<dpiSodaCollNames>(),
        24usize,
        concat!("Size of: ", stringify!(dpiSodaCollNames))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiSodaCollNames>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiSodaCollNames))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSodaCollNames>())).numNames as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSodaCollNames),
            "::",
            stringify!(numNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSodaCollNames>())).names as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSodaCollNames),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSodaCollNames>())).nameLengths as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSodaCollNames),
            "::",
            stringify!(nameLengths)
        )
    );
}
impl Clone for dpiSodaCollNames {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiSodaOperOptions {
    pub numKeys: u32,
    pub keys: *mut *const ::std::os::raw::c_char,
    pub keyLengths: *mut u32,
    pub key: *const ::std::os::raw::c_char,
    pub keyLength: u32,
    pub version: *const ::std::os::raw::c_char,
    pub versionLength: u32,
    pub filter: *const ::std::os::raw::c_char,
    pub filterLength: u32,
    pub skip: u32,
    pub limit: u32,
}
#[test]
fn bindgen_test_layout_dpiSodaOperOptions() {
    assert_eq!(
        ::std::mem::size_of::<dpiSodaOperOptions>(),
        80usize,
        concat!("Size of: ", stringify!(dpiSodaOperOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiSodaOperOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiSodaOperOptions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSodaOperOptions>())).numKeys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSodaOperOptions),
            "::",
            stringify!(numKeys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSodaOperOptions>())).keys as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSodaOperOptions),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSodaOperOptions>())).keyLengths as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSodaOperOptions),
            "::",
            stringify!(keyLengths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSodaOperOptions>())).key as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSodaOperOptions),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSodaOperOptions>())).keyLength as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSodaOperOptions),
            "::",
            stringify!(keyLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSodaOperOptions>())).version as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSodaOperOptions),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiSodaOperOptions>())).versionLength as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSodaOperOptions),
            "::",
            stringify!(versionLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSodaOperOptions>())).filter as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSodaOperOptions),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSodaOperOptions>())).filterLength as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSodaOperOptions),
            "::",
            stringify!(filterLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSodaOperOptions>())).skip as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSodaOperOptions),
            "::",
            stringify!(skip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSodaOperOptions>())).limit as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSodaOperOptions),
            "::",
            stringify!(limit)
        )
    );
}
impl Clone for dpiSodaOperOptions {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiStmtInfo {
    pub isQuery: ::std::os::raw::c_int,
    pub isPLSQL: ::std::os::raw::c_int,
    pub isDDL: ::std::os::raw::c_int,
    pub isDML: ::std::os::raw::c_int,
    pub statementType: dpiStatementType,
    pub isReturning: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_dpiStmtInfo() {
    assert_eq!(
        ::std::mem::size_of::<dpiStmtInfo>(),
        24usize,
        concat!("Size of: ", stringify!(dpiStmtInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiStmtInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(dpiStmtInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiStmtInfo>())).isQuery as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiStmtInfo),
            "::",
            stringify!(isQuery)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiStmtInfo>())).isPLSQL as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiStmtInfo),
            "::",
            stringify!(isPLSQL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiStmtInfo>())).isDDL as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiStmtInfo),
            "::",
            stringify!(isDDL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiStmtInfo>())).isDML as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiStmtInfo),
            "::",
            stringify!(isDML)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiStmtInfo>())).statementType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiStmtInfo),
            "::",
            stringify!(statementType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiStmtInfo>())).isReturning as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiStmtInfo),
            "::",
            stringify!(isReturning)
        )
    );
}
impl Clone for dpiStmtInfo {
    fn clone(&self) -> Self {
        *self
    }
}
pub type dpiSubscrCallback = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, message: *mut dpiSubscrMessage),
>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiSubscrCreateParams {
    pub subscrNamespace: dpiSubscrNamespace,
    pub protocol: dpiSubscrProtocol,
    pub qos: dpiSubscrQOS,
    pub operations: dpiOpCode,
    pub portNumber: u32,
    pub timeout: u32,
    pub name: *const ::std::os::raw::c_char,
    pub nameLength: u32,
    pub callback: dpiSubscrCallback,
    pub callbackContext: *mut ::std::os::raw::c_void,
    pub recipientName: *const ::std::os::raw::c_char,
    pub recipientNameLength: u32,
    pub ipAddress: *const ::std::os::raw::c_char,
    pub ipAddressLength: u32,
    pub groupingClass: u8,
    pub groupingValue: u32,
    pub groupingType: u8,
}
#[test]
fn bindgen_test_layout_dpiSubscrCreateParams() {
    assert_eq!(
        ::std::mem::size_of::<dpiSubscrCreateParams>(),
        96usize,
        concat!("Size of: ", stringify!(dpiSubscrCreateParams))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiSubscrCreateParams>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiSubscrCreateParams))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiSubscrCreateParams>())).subscrNamespace as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(subscrNamespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrCreateParams>())).protocol as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrCreateParams>())).qos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiSubscrCreateParams>())).operations as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(operations)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiSubscrCreateParams>())).portNumber as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(portNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrCreateParams>())).timeout as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrCreateParams>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiSubscrCreateParams>())).nameLength as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(nameLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrCreateParams>())).callback as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiSubscrCreateParams>())).callbackContext as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(callbackContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiSubscrCreateParams>())).recipientName as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(recipientName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiSubscrCreateParams>())).recipientNameLength as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(recipientNameLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrCreateParams>())).ipAddress as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(ipAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiSubscrCreateParams>())).ipAddressLength as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(ipAddressLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiSubscrCreateParams>())).groupingClass as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(groupingClass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiSubscrCreateParams>())).groupingValue as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(groupingValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiSubscrCreateParams>())).groupingType as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrCreateParams),
            "::",
            stringify!(groupingType)
        )
    );
}
impl Clone for dpiSubscrCreateParams {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiSubscrMessage {
    pub eventType: dpiEventType,
    pub dbName: *const ::std::os::raw::c_char,
    pub dbNameLength: u32,
    pub tables: *mut dpiSubscrMessageTable,
    pub numTables: u32,
    pub queries: *mut dpiSubscrMessageQuery,
    pub numQueries: u32,
    pub errorInfo: *mut dpiErrorInfo,
    pub txId: *const ::std::os::raw::c_void,
    pub txIdLength: u32,
    pub registered: ::std::os::raw::c_int,
    pub queueName: *const ::std::os::raw::c_char,
    pub queueNameLength: u32,
    pub consumerName: *const ::std::os::raw::c_char,
    pub consumerNameLength: u32,
}
#[test]
fn bindgen_test_layout_dpiSubscrMessage() {
    assert_eq!(
        ::std::mem::size_of::<dpiSubscrMessage>(),
        112usize,
        concat!("Size of: ", stringify!(dpiSubscrMessage))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiSubscrMessage>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiSubscrMessage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessage>())).eventType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessage),
            "::",
            stringify!(eventType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessage>())).dbName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessage),
            "::",
            stringify!(dbName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessage>())).dbNameLength as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessage),
            "::",
            stringify!(dbNameLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessage>())).tables as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessage),
            "::",
            stringify!(tables)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessage>())).numTables as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessage),
            "::",
            stringify!(numTables)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessage>())).queries as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessage),
            "::",
            stringify!(queries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessage>())).numQueries as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessage),
            "::",
            stringify!(numQueries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessage>())).errorInfo as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessage),
            "::",
            stringify!(errorInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessage>())).txId as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessage),
            "::",
            stringify!(txId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessage>())).txIdLength as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessage),
            "::",
            stringify!(txIdLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessage>())).registered as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessage),
            "::",
            stringify!(registered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessage>())).queueName as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessage),
            "::",
            stringify!(queueName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiSubscrMessage>())).queueNameLength as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessage),
            "::",
            stringify!(queueNameLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessage>())).consumerName as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessage),
            "::",
            stringify!(consumerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiSubscrMessage>())).consumerNameLength as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessage),
            "::",
            stringify!(consumerNameLength)
        )
    );
}
impl Clone for dpiSubscrMessage {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiSubscrMessageQuery {
    pub id: u64,
    pub operation: dpiOpCode,
    pub tables: *mut dpiSubscrMessageTable,
    pub numTables: u32,
}
#[test]
fn bindgen_test_layout_dpiSubscrMessageQuery() {
    assert_eq!(
        ::std::mem::size_of::<dpiSubscrMessageQuery>(),
        32usize,
        concat!("Size of: ", stringify!(dpiSubscrMessageQuery))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiSubscrMessageQuery>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiSubscrMessageQuery))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessageQuery>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessageQuery),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessageQuery>())).operation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessageQuery),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessageQuery>())).tables as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessageQuery),
            "::",
            stringify!(tables)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessageQuery>())).numTables as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessageQuery),
            "::",
            stringify!(numTables)
        )
    );
}
impl Clone for dpiSubscrMessageQuery {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiSubscrMessageRow {
    pub operation: dpiOpCode,
    pub rowid: *const ::std::os::raw::c_char,
    pub rowidLength: u32,
}
#[test]
fn bindgen_test_layout_dpiSubscrMessageRow() {
    assert_eq!(
        ::std::mem::size_of::<dpiSubscrMessageRow>(),
        24usize,
        concat!("Size of: ", stringify!(dpiSubscrMessageRow))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiSubscrMessageRow>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiSubscrMessageRow))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessageRow>())).operation as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessageRow),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessageRow>())).rowid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessageRow),
            "::",
            stringify!(rowid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessageRow>())).rowidLength as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessageRow),
            "::",
            stringify!(rowidLength)
        )
    );
}
impl Clone for dpiSubscrMessageRow {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiSubscrMessageTable {
    pub operation: dpiOpCode,
    pub name: *const ::std::os::raw::c_char,
    pub nameLength: u32,
    pub rows: *mut dpiSubscrMessageRow,
    pub numRows: u32,
}
#[test]
fn bindgen_test_layout_dpiSubscrMessageTable() {
    assert_eq!(
        ::std::mem::size_of::<dpiSubscrMessageTable>(),
        40usize,
        concat!("Size of: ", stringify!(dpiSubscrMessageTable))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiSubscrMessageTable>(),
        8usize,
        concat!("Alignment of ", stringify!(dpiSubscrMessageTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessageTable>())).operation as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessageTable),
            "::",
            stringify!(operation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessageTable>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessageTable),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dpiSubscrMessageTable>())).nameLength as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessageTable),
            "::",
            stringify!(nameLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessageTable>())).rows as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessageTable),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiSubscrMessageTable>())).numRows as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiSubscrMessageTable),
            "::",
            stringify!(numRows)
        )
    );
}
impl Clone for dpiSubscrMessageTable {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct dpiVersionInfo {
    pub versionNum: ::std::os::raw::c_int,
    pub releaseNum: ::std::os::raw::c_int,
    pub updateNum: ::std::os::raw::c_int,
    pub portReleaseNum: ::std::os::raw::c_int,
    pub portUpdateNum: ::std::os::raw::c_int,
    pub fullVersionNum: u32,
}
#[test]
fn bindgen_test_layout_dpiVersionInfo() {
    assert_eq!(
        ::std::mem::size_of::<dpiVersionInfo>(),
        24usize,
        concat!("Size of: ", stringify!(dpiVersionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<dpiVersionInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(dpiVersionInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiVersionInfo>())).versionNum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiVersionInfo),
            "::",
            stringify!(versionNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiVersionInfo>())).releaseNum as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiVersionInfo),
            "::",
            stringify!(releaseNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiVersionInfo>())).updateNum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiVersionInfo),
            "::",
            stringify!(updateNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiVersionInfo>())).portReleaseNum as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiVersionInfo),
            "::",
            stringify!(portReleaseNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiVersionInfo>())).portUpdateNum as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiVersionInfo),
            "::",
            stringify!(portUpdateNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dpiVersionInfo>())).fullVersionNum as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(dpiVersionInfo),
            "::",
            stringify!(fullVersionNum)
        )
    );
}
impl Clone for dpiVersionInfo {
    fn clone(&self) -> Self {
        *self
    }
}
extern "C" {
    pub fn dpiContext_create(
        majorVersion: ::std::os::raw::c_uint,
        minorVersion: ::std::os::raw::c_uint,
        context: *mut *mut dpiContext,
        errorInfo: *mut dpiErrorInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiContext_destroy(context: *mut dpiContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiContext_getClientVersion(
        context: *const dpiContext,
        versionInfo: *mut dpiVersionInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiContext_getError(context: *const dpiContext, errorInfo: *mut dpiErrorInfo);
}
extern "C" {
    pub fn dpiContext_initCommonCreateParams(
        context: *const dpiContext,
        params: *mut dpiCommonCreateParams,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiContext_initConnCreateParams(
        context: *const dpiContext,
        params: *mut dpiConnCreateParams,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiContext_initPoolCreateParams(
        context: *const dpiContext,
        params: *mut dpiPoolCreateParams,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiContext_initSodaOperOptions(
        context: *const dpiContext,
        options: *mut dpiSodaOperOptions,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiContext_initSubscrCreateParams(
        context: *const dpiContext,
        params: *mut dpiSubscrCreateParams,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_addRef(conn: *mut dpiConn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_beginDistribTrans(
        conn: *mut dpiConn,
        formatId: ::std::os::raw::c_long,
        transactionId: *const ::std::os::raw::c_char,
        transactionIdLength: u32,
        branchId: *const ::std::os::raw::c_char,
        branchIdLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_breakExecution(conn: *mut dpiConn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_changePassword(
        conn: *mut dpiConn,
        userName: *const ::std::os::raw::c_char,
        userNameLength: u32,
        oldPassword: *const ::std::os::raw::c_char,
        oldPasswordLength: u32,
        newPassword: *const ::std::os::raw::c_char,
        newPasswordLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_close(
        conn: *mut dpiConn,
        mode: dpiConnCloseMode,
        tag: *const ::std::os::raw::c_char,
        tagLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_commit(conn: *mut dpiConn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_create(
        context: *const dpiContext,
        userName: *const ::std::os::raw::c_char,
        userNameLength: u32,
        password: *const ::std::os::raw::c_char,
        passwordLength: u32,
        connectString: *const ::std::os::raw::c_char,
        connectStringLength: u32,
        commonParams: *const dpiCommonCreateParams,
        createParams: *mut dpiConnCreateParams,
        conn: *mut *mut dpiConn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_deqObject(
        conn: *mut dpiConn,
        queueName: *const ::std::os::raw::c_char,
        queueNameLength: u32,
        options: *mut dpiDeqOptions,
        props: *mut dpiMsgProps,
        payload: *mut dpiObject,
        msgId: *mut *const ::std::os::raw::c_char,
        msgIdLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_enqObject(
        conn: *mut dpiConn,
        queueName: *const ::std::os::raw::c_char,
        queueNameLength: u32,
        options: *mut dpiEnqOptions,
        props: *mut dpiMsgProps,
        payload: *mut dpiObject,
        msgId: *mut *const ::std::os::raw::c_char,
        msgIdLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_getCallTimeout(conn: *mut dpiConn, value: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_getCurrentSchema(
        conn: *mut dpiConn,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_getEdition(
        conn: *mut dpiConn,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_getEncodingInfo(
        conn: *mut dpiConn,
        info: *mut dpiEncodingInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_getExternalName(
        conn: *mut dpiConn,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_getHandle(
        conn: *mut dpiConn,
        handle: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_getInternalName(
        conn: *mut dpiConn,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_getLTXID(
        conn: *mut dpiConn,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_getObjectType(
        conn: *mut dpiConn,
        name: *const ::std::os::raw::c_char,
        nameLength: u32,
        objType: *mut *mut dpiObjectType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_getServerVersion(
        conn: *mut dpiConn,
        releaseString: *mut *const ::std::os::raw::c_char,
        releaseStringLength: *mut u32,
        versionInfo: *mut dpiVersionInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_getSodaDb(conn: *mut dpiConn, db: *mut *mut dpiSodaDb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_getStmtCacheSize(
        conn: *mut dpiConn,
        cacheSize: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_newDeqOptions(
        conn: *mut dpiConn,
        options: *mut *mut dpiDeqOptions,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_newEnqOptions(
        conn: *mut dpiConn,
        options: *mut *mut dpiEnqOptions,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_newMsgProps(
        conn: *mut dpiConn,
        props: *mut *mut dpiMsgProps,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_newTempLob(
        conn: *mut dpiConn,
        lobType: dpiOracleTypeNum,
        lob: *mut *mut dpiLob,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_newVar(
        conn: *mut dpiConn,
        oracleTypeNum: dpiOracleTypeNum,
        nativeTypeNum: dpiNativeTypeNum,
        maxArraySize: u32,
        size: u32,
        sizeIsBytes: ::std::os::raw::c_int,
        isArray: ::std::os::raw::c_int,
        objType: *mut dpiObjectType,
        var: *mut *mut dpiVar,
        data: *mut *mut dpiData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_ping(conn: *mut dpiConn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_prepareDistribTrans(
        conn: *mut dpiConn,
        commitNeeded: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_prepareStmt(
        conn: *mut dpiConn,
        scrollable: ::std::os::raw::c_int,
        sql: *const ::std::os::raw::c_char,
        sqlLength: u32,
        tag: *const ::std::os::raw::c_char,
        tagLength: u32,
        stmt: *mut *mut dpiStmt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_release(conn: *mut dpiConn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_rollback(conn: *mut dpiConn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_setAction(
        conn: *mut dpiConn,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_setCallTimeout(conn: *mut dpiConn, value: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_setClientIdentifier(
        conn: *mut dpiConn,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_setClientInfo(
        conn: *mut dpiConn,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_setCurrentSchema(
        conn: *mut dpiConn,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_setDbOp(
        conn: *mut dpiConn,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_setExternalName(
        conn: *mut dpiConn,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_setInternalName(
        conn: *mut dpiConn,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_setModule(
        conn: *mut dpiConn,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_setStmtCacheSize(conn: *mut dpiConn, cacheSize: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_shutdownDatabase(
        conn: *mut dpiConn,
        mode: dpiShutdownMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_startupDatabase(
        conn: *mut dpiConn,
        mode: dpiStartupMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_subscribe(
        conn: *mut dpiConn,
        params: *mut dpiSubscrCreateParams,
        subscr: *mut *mut dpiSubscr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiConn_unsubscribe(conn: *mut dpiConn, subscr: *mut dpiSubscr)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiData_getBool(data: *mut dpiData) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiData_getBytes(data: *mut dpiData) -> *mut dpiBytes;
}
extern "C" {
    pub fn dpiData_getDouble(data: *mut dpiData) -> f64;
}
extern "C" {
    pub fn dpiData_getFloat(data: *mut dpiData) -> f32;
}
extern "C" {
    pub fn dpiData_getInt64(data: *mut dpiData) -> i64;
}
extern "C" {
    pub fn dpiData_getIntervalDS(data: *mut dpiData) -> *mut dpiIntervalDS;
}
extern "C" {
    pub fn dpiData_getIntervalYM(data: *mut dpiData) -> *mut dpiIntervalYM;
}
extern "C" {
    pub fn dpiData_getIsNull(data: *mut dpiData) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiData_getLOB(data: *mut dpiData) -> *mut dpiLob;
}
extern "C" {
    pub fn dpiData_getObject(data: *mut dpiData) -> *mut dpiObject;
}
extern "C" {
    pub fn dpiData_getStmt(data: *mut dpiData) -> *mut dpiStmt;
}
extern "C" {
    pub fn dpiData_getTimestamp(data: *mut dpiData) -> *mut dpiTimestamp;
}
extern "C" {
    pub fn dpiData_getUint64(data: *mut dpiData) -> u64;
}
extern "C" {
    pub fn dpiData_setBool(data: *mut dpiData, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dpiData_setBytes(data: *mut dpiData, ptr: *mut ::std::os::raw::c_char, length: u32);
}
extern "C" {
    pub fn dpiData_setDouble(data: *mut dpiData, value: f64);
}
extern "C" {
    pub fn dpiData_setFloat(data: *mut dpiData, value: f32);
}
extern "C" {
    pub fn dpiData_setInt64(data: *mut dpiData, value: i64);
}
extern "C" {
    pub fn dpiData_setIntervalDS(
        data: *mut dpiData,
        days: i32,
        hours: i32,
        minutes: i32,
        seconds: i32,
        fsceconds: i32,
    );
}
extern "C" {
    pub fn dpiData_setIntervalYM(data: *mut dpiData, years: i32, months: i32);
}
extern "C" {
    pub fn dpiData_setLOB(data: *mut dpiData, lob: *mut dpiLob);
}
extern "C" {
    pub fn dpiData_setNull(data: *mut dpiData);
}
extern "C" {
    pub fn dpiData_setObject(data: *mut dpiData, obj: *mut dpiObject);
}
extern "C" {
    pub fn dpiData_setStmt(data: *mut dpiData, stmt: *mut dpiStmt);
}
extern "C" {
    pub fn dpiData_setTimestamp(
        data: *mut dpiData,
        year: i16,
        month: u8,
        day: u8,
        hour: u8,
        minute: u8,
        second: u8,
        fsecond: u32,
        tzHourOffset: i8,
        tzMinuteOffset: i8,
    );
}
extern "C" {
    pub fn dpiData_setUint64(data: *mut dpiData, value: u64);
}
extern "C" {
    pub fn dpiDeqOptions_addRef(options: *mut dpiDeqOptions) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_getCondition(
        options: *mut dpiDeqOptions,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_getConsumerName(
        options: *mut dpiDeqOptions,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_getCorrelation(
        options: *mut dpiDeqOptions,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_getMode(
        options: *mut dpiDeqOptions,
        value: *mut dpiDeqMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_getMsgId(
        options: *mut dpiDeqOptions,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_getNavigation(
        options: *mut dpiDeqOptions,
        value: *mut dpiDeqNavigation,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_getTransformation(
        options: *mut dpiDeqOptions,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_getVisibility(
        options: *mut dpiDeqOptions,
        value: *mut dpiVisibility,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_getWait(
        options: *mut dpiDeqOptions,
        value: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_release(options: *mut dpiDeqOptions) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_setCondition(
        options: *mut dpiDeqOptions,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_setConsumerName(
        options: *mut dpiDeqOptions,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_setCorrelation(
        options: *mut dpiDeqOptions,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_setDeliveryMode(
        options: *mut dpiDeqOptions,
        value: dpiMessageDeliveryMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_setMode(
        options: *mut dpiDeqOptions,
        value: dpiDeqMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_setMsgId(
        options: *mut dpiDeqOptions,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_setNavigation(
        options: *mut dpiDeqOptions,
        value: dpiDeqNavigation,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_setTransformation(
        options: *mut dpiDeqOptions,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_setVisibility(
        options: *mut dpiDeqOptions,
        value: dpiVisibility,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiDeqOptions_setWait(options: *mut dpiDeqOptions, value: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiEnqOptions_addRef(options: *mut dpiEnqOptions) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiEnqOptions_getTransformation(
        options: *mut dpiEnqOptions,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiEnqOptions_getVisibility(
        options: *mut dpiEnqOptions,
        value: *mut dpiVisibility,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiEnqOptions_release(options: *mut dpiEnqOptions) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiEnqOptions_setDeliveryMode(
        options: *mut dpiEnqOptions,
        value: dpiMessageDeliveryMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiEnqOptions_setTransformation(
        options: *mut dpiEnqOptions,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiEnqOptions_setVisibility(
        options: *mut dpiEnqOptions,
        value: dpiVisibility,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_addRef(lob: *mut dpiLob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_close(lob: *mut dpiLob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_closeResource(lob: *mut dpiLob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_copy(lob: *mut dpiLob, copiedLob: *mut *mut dpiLob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_getBufferSize(
        lob: *mut dpiLob,
        sizeInChars: u64,
        sizeInBytes: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_getChunkSize(lob: *mut dpiLob, size: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_getDirectoryAndFileName(
        lob: *mut dpiLob,
        directoryAlias: *mut *const ::std::os::raw::c_char,
        directoryAliasLength: *mut u32,
        fileName: *mut *const ::std::os::raw::c_char,
        fileNameLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_getFileExists(
        lob: *mut dpiLob,
        exists: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_getIsResourceOpen(
        lob: *mut dpiLob,
        isOpen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_getSize(lob: *mut dpiLob, size: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_openResource(lob: *mut dpiLob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_readBytes(
        lob: *mut dpiLob,
        offset: u64,
        amount: u64,
        value: *mut ::std::os::raw::c_char,
        valueLength: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_release(lob: *mut dpiLob) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_setDirectoryAndFileName(
        lob: *mut dpiLob,
        directoryAlias: *const ::std::os::raw::c_char,
        directoryAliasLength: u32,
        fileName: *const ::std::os::raw::c_char,
        fileNameLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_setFromBytes(
        lob: *mut dpiLob,
        value: *const ::std::os::raw::c_char,
        valueLength: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_trim(lob: *mut dpiLob, newSize: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiLob_writeBytes(
        lob: *mut dpiLob,
        offset: u64,
        value: *const ::std::os::raw::c_char,
        valueLength: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_addRef(props: *mut dpiMsgProps) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_getNumAttempts(
        props: *mut dpiMsgProps,
        value: *mut i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_getCorrelation(
        props: *mut dpiMsgProps,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_getDelay(props: *mut dpiMsgProps, value: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_getDeliveryMode(
        props: *mut dpiMsgProps,
        value: *mut dpiMessageDeliveryMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_getEnqTime(
        props: *mut dpiMsgProps,
        value: *mut dpiTimestamp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_getExceptionQ(
        props: *mut dpiMsgProps,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_getExpiration(
        props: *mut dpiMsgProps,
        value: *mut i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_getOriginalMsgId(
        props: *mut dpiMsgProps,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_getPriority(
        props: *mut dpiMsgProps,
        value: *mut i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_getState(
        props: *mut dpiMsgProps,
        value: *mut dpiMessageState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_release(props: *mut dpiMsgProps) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_setCorrelation(
        props: *mut dpiMsgProps,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_setDelay(props: *mut dpiMsgProps, value: i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_setExceptionQ(
        props: *mut dpiMsgProps,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_setExpiration(props: *mut dpiMsgProps, value: i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_setOriginalMsgId(
        props: *mut dpiMsgProps,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiMsgProps_setPriority(props: *mut dpiMsgProps, value: i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObject_addRef(obj: *mut dpiObject) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObject_appendElement(
        obj: *mut dpiObject,
        nativeTypeNum: dpiNativeTypeNum,
        value: *mut dpiData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObject_copy(
        obj: *mut dpiObject,
        copiedObj: *mut *mut dpiObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObject_deleteElementByIndex(obj: *mut dpiObject, index: i32)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObject_getAttributeValue(
        obj: *mut dpiObject,
        attr: *mut dpiObjectAttr,
        nativeTypeNum: dpiNativeTypeNum,
        value: *mut dpiData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObject_getElementExistsByIndex(
        obj: *mut dpiObject,
        index: i32,
        exists: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObject_getElementValueByIndex(
        obj: *mut dpiObject,
        index: i32,
        nativeTypeNum: dpiNativeTypeNum,
        value: *mut dpiData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObject_getFirstIndex(
        obj: *mut dpiObject,
        index: *mut i32,
        exists: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObject_getLastIndex(
        obj: *mut dpiObject,
        index: *mut i32,
        exists: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObject_getNextIndex(
        obj: *mut dpiObject,
        index: i32,
        nextIndex: *mut i32,
        exists: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObject_getPrevIndex(
        obj: *mut dpiObject,
        index: i32,
        prevIndex: *mut i32,
        exists: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObject_getSize(obj: *mut dpiObject, size: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObject_release(obj: *mut dpiObject) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObject_setAttributeValue(
        obj: *mut dpiObject,
        attr: *mut dpiObjectAttr,
        nativeTypeNum: dpiNativeTypeNum,
        value: *mut dpiData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObject_setElementValueByIndex(
        obj: *mut dpiObject,
        index: i32,
        nativeTypeNum: dpiNativeTypeNum,
        value: *mut dpiData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObject_trim(obj: *mut dpiObject, numToTrim: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObjectAttr_addRef(attr: *mut dpiObjectAttr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObjectAttr_getInfo(
        attr: *mut dpiObjectAttr,
        info: *mut dpiObjectAttrInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObjectAttr_release(attr: *mut dpiObjectAttr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObjectType_addRef(objType: *mut dpiObjectType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObjectType_createObject(
        objType: *mut dpiObjectType,
        obj: *mut *mut dpiObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObjectType_getAttributes(
        objType: *mut dpiObjectType,
        numAttributes: u16,
        attributes: *mut *mut dpiObjectAttr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObjectType_getInfo(
        objType: *mut dpiObjectType,
        info: *mut dpiObjectTypeInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiObjectType_release(objType: *mut dpiObjectType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_acquireConnection(
        pool: *mut dpiPool,
        userName: *const ::std::os::raw::c_char,
        userNameLength: u32,
        password: *const ::std::os::raw::c_char,
        passwordLength: u32,
        createParams: *mut dpiConnCreateParams,
        conn: *mut *mut dpiConn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_addRef(pool: *mut dpiPool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_close(pool: *mut dpiPool, closeMode: dpiPoolCloseMode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_create(
        context: *const dpiContext,
        userName: *const ::std::os::raw::c_char,
        userNameLength: u32,
        password: *const ::std::os::raw::c_char,
        passwordLength: u32,
        connectString: *const ::std::os::raw::c_char,
        connectStringLength: u32,
        commonParams: *const dpiCommonCreateParams,
        createParams: *mut dpiPoolCreateParams,
        pool: *mut *mut dpiPool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_getBusyCount(pool: *mut dpiPool, value: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_getEncodingInfo(
        pool: *mut dpiPool,
        info: *mut dpiEncodingInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_getGetMode(
        pool: *mut dpiPool,
        value: *mut dpiPoolGetMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_getMaxLifetimeSession(
        pool: *mut dpiPool,
        value: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_getOpenCount(pool: *mut dpiPool, value: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_getStmtCacheSize(
        pool: *mut dpiPool,
        cacheSize: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_getTimeout(pool: *mut dpiPool, value: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_getWaitTimeout(pool: *mut dpiPool, value: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_release(pool: *mut dpiPool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_setGetMode(pool: *mut dpiPool, value: dpiPoolGetMode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_setMaxLifetimeSession(pool: *mut dpiPool, value: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_setStmtCacheSize(pool: *mut dpiPool, cacheSize: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_setTimeout(pool: *mut dpiPool, value: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiPool_setWaitTimeout(pool: *mut dpiPool, value: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaColl_addRef(coll: *mut dpiSodaColl) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaColl_createIndex(
        coll: *mut dpiSodaColl,
        indexSpec: *const ::std::os::raw::c_char,
        indexSpecLength: u32,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaColl_drop(
        coll: *mut dpiSodaColl,
        flags: u32,
        isDropped: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaColl_dropIndex(
        coll: *mut dpiSodaColl,
        name: *const ::std::os::raw::c_char,
        nameLength: u32,
        flags: u32,
        isDropped: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaColl_find(
        coll: *mut dpiSodaColl,
        options: *const dpiSodaOperOptions,
        flags: u32,
        cursor: *mut *mut dpiSodaDocCursor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaColl_findOne(
        coll: *mut dpiSodaColl,
        options: *const dpiSodaOperOptions,
        flags: u32,
        doc: *mut *mut dpiSodaDoc,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaColl_getDataGuide(
        coll: *mut dpiSodaColl,
        flags: u32,
        doc: *mut *mut dpiSodaDoc,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaColl_getDocCount(
        coll: *mut dpiSodaColl,
        options: *const dpiSodaOperOptions,
        flags: u32,
        count: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaColl_getMetadata(
        coll: *mut dpiSodaColl,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaColl_getName(
        coll: *mut dpiSodaColl,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaColl_insertOne(
        coll: *mut dpiSodaColl,
        doc: *mut dpiSodaDoc,
        flags: u32,
        insertedDoc: *mut *mut dpiSodaDoc,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaColl_release(coll: *mut dpiSodaColl) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaColl_remove(
        coll: *mut dpiSodaColl,
        options: *const dpiSodaOperOptions,
        flags: u32,
        count: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaColl_replaceOne(
        coll: *mut dpiSodaColl,
        options: *const dpiSodaOperOptions,
        doc: *mut dpiSodaDoc,
        flags: u32,
        replaced: *mut ::std::os::raw::c_int,
        replacedDoc: *mut *mut dpiSodaDoc,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaCollCursor_addRef(cursor: *mut dpiSodaCollCursor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaCollCursor_close(cursor: *mut dpiSodaCollCursor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaCollCursor_getNext(
        cursor: *mut dpiSodaCollCursor,
        flags: u32,
        coll: *mut *mut dpiSodaColl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaCollCursor_release(cursor: *mut dpiSodaCollCursor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDb_addRef(db: *mut dpiSodaDb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDb_createCollection(
        db: *mut dpiSodaDb,
        name: *const ::std::os::raw::c_char,
        nameLength: u32,
        metadata: *const ::std::os::raw::c_char,
        metadataLength: u32,
        flags: u32,
        coll: *mut *mut dpiSodaColl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDb_createDocument(
        db: *mut dpiSodaDb,
        key: *const ::std::os::raw::c_char,
        keyLength: u32,
        content: *const ::std::os::raw::c_char,
        contentLength: u32,
        mediaType: *const ::std::os::raw::c_char,
        mediaTypeLength: u32,
        flags: u32,
        doc: *mut *mut dpiSodaDoc,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDb_freeCollectionNames(
        db: *mut dpiSodaDb,
        names: *mut dpiSodaCollNames,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDb_getCollections(
        db: *mut dpiSodaDb,
        startName: *const ::std::os::raw::c_char,
        startNameLength: u32,
        flags: u32,
        cursor: *mut *mut dpiSodaCollCursor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDb_getCollectionNames(
        db: *mut dpiSodaDb,
        startName: *const ::std::os::raw::c_char,
        startNameLength: u32,
        limit: u32,
        flags: u32,
        names: *mut dpiSodaCollNames,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDb_openCollection(
        db: *mut dpiSodaDb,
        name: *const ::std::os::raw::c_char,
        nameLength: u32,
        flags: u32,
        coll: *mut *mut dpiSodaColl,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDb_release(db: *mut dpiSodaDb) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDoc_addRef(cursor: *mut dpiSodaDoc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDoc_getContent(
        doc: *mut dpiSodaDoc,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
        encoding: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDoc_getCreatedOn(
        doc: *mut dpiSodaDoc,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDoc_getKey(
        doc: *mut dpiSodaDoc,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDoc_getLastModified(
        doc: *mut dpiSodaDoc,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDoc_getMediaType(
        doc: *mut dpiSodaDoc,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDoc_getVersion(
        doc: *mut dpiSodaDoc,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDoc_release(cursor: *mut dpiSodaDoc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDocCursor_addRef(cursor: *mut dpiSodaDocCursor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDocCursor_close(cursor: *mut dpiSodaDocCursor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDocCursor_getNext(
        cursor: *mut dpiSodaDocCursor,
        flags: u32,
        doc: *mut *mut dpiSodaDoc,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSodaDocCursor_release(cursor: *mut dpiSodaDocCursor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_addRef(stmt: *mut dpiStmt) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_bindByName(
        stmt: *mut dpiStmt,
        name: *const ::std::os::raw::c_char,
        nameLength: u32,
        var: *mut dpiVar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_bindByPos(
        stmt: *mut dpiStmt,
        pos: u32,
        var: *mut dpiVar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_bindValueByName(
        stmt: *mut dpiStmt,
        name: *const ::std::os::raw::c_char,
        nameLength: u32,
        nativeTypeNum: dpiNativeTypeNum,
        data: *mut dpiData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_bindValueByPos(
        stmt: *mut dpiStmt,
        pos: u32,
        nativeTypeNum: dpiNativeTypeNum,
        data: *mut dpiData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_close(
        stmt: *mut dpiStmt,
        tag: *const ::std::os::raw::c_char,
        tagLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_define(stmt: *mut dpiStmt, pos: u32, var: *mut dpiVar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_defineValue(
        stmt: *mut dpiStmt,
        pos: u32,
        oracleTypeNum: dpiOracleTypeNum,
        nativeTypeNum: dpiNativeTypeNum,
        size: u32,
        sizeIsBytes: ::std::os::raw::c_int,
        objType: *mut dpiObjectType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_execute(
        stmt: *mut dpiStmt,
        mode: dpiExecMode,
        numQueryColumns: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_executeMany(
        stmt: *mut dpiStmt,
        mode: dpiExecMode,
        numIters: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_fetch(
        stmt: *mut dpiStmt,
        found: *mut ::std::os::raw::c_int,
        bufferRowIndex: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_fetchRows(
        stmt: *mut dpiStmt,
        maxRows: u32,
        bufferRowIndex: *mut u32,
        numRowsFetched: *mut u32,
        moreRows: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_getBatchErrorCount(stmt: *mut dpiStmt, count: *mut u32)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_getBatchErrors(
        stmt: *mut dpiStmt,
        numErrors: u32,
        errors: *mut dpiErrorInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_getBindCount(stmt: *mut dpiStmt, count: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_getBindNames(
        stmt: *mut dpiStmt,
        numBindNames: *mut u32,
        bindNames: *mut *const ::std::os::raw::c_char,
        bindNameLengths: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_getFetchArraySize(
        stmt: *mut dpiStmt,
        arraySize: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_getImplicitResult(
        stmt: *mut dpiStmt,
        implicitResult: *mut *mut dpiStmt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_getInfo(stmt: *mut dpiStmt, info: *mut dpiStmtInfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_getNumQueryColumns(
        stmt: *mut dpiStmt,
        numQueryColumns: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_getQueryInfo(
        stmt: *mut dpiStmt,
        pos: u32,
        info: *mut dpiQueryInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_getQueryValue(
        stmt: *mut dpiStmt,
        pos: u32,
        nativeTypeNum: *mut dpiNativeTypeNum,
        data: *mut *mut dpiData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_getRowCount(stmt: *mut dpiStmt, count: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_getRowCounts(
        stmt: *mut dpiStmt,
        numRowCounts: *mut u32,
        rowCounts: *mut *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_getSubscrQueryId(stmt: *mut dpiStmt, queryId: *mut u64)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_release(stmt: *mut dpiStmt) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_scroll(
        stmt: *mut dpiStmt,
        mode: dpiFetchMode,
        offset: i32,
        rowCountOffset: i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiStmt_setFetchArraySize(stmt: *mut dpiStmt, arraySize: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiRowid_addRef(rowid: *mut dpiRowid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiRowid_getStringValue(
        rowid: *mut dpiRowid,
        value: *mut *const ::std::os::raw::c_char,
        valueLength: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiRowid_release(subscr: *mut dpiRowid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSubscr_addRef(subscr: *mut dpiSubscr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSubscr_prepareStmt(
        subscr: *mut dpiSubscr,
        sql: *const ::std::os::raw::c_char,
        sqlLength: u32,
        stmt: *mut *mut dpiStmt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiSubscr_release(subscr: *mut dpiSubscr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiVar_addRef(var: *mut dpiVar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiVar_copyData(
        var: *mut dpiVar,
        pos: u32,
        sourceVar: *mut dpiVar,
        sourcePos: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiVar_getNumElementsInArray(
        var: *mut dpiVar,
        numElements: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiVar_getReturnedData(
        var: *mut dpiVar,
        pos: u32,
        numElements: *mut u32,
        data: *mut *mut dpiData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiVar_getSizeInBytes(var: *mut dpiVar, sizeInBytes: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiVar_release(var: *mut dpiVar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiVar_setFromBytes(
        var: *mut dpiVar,
        pos: u32,
        value: *const ::std::os::raw::c_char,
        valueLength: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiVar_setFromLob(var: *mut dpiVar, pos: u32, lob: *mut dpiLob)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiVar_setFromObject(
        var: *mut dpiVar,
        pos: u32,
        obj: *mut dpiObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiVar_setFromRowid(
        var: *mut dpiVar,
        pos: u32,
        rowid: *mut dpiRowid,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiVar_setFromStmt(
        var: *mut dpiVar,
        pos: u32,
        stmt: *mut dpiStmt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dpiVar_setNumElementsInArray(
        var: *mut dpiVar,
        numElements: u32,
    ) -> ::std::os::raw::c_int;
}
